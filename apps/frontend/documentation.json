{
    "pipes": [],
    "interfaces": [
        {
            "name": "CartItem",
            "id": "interface-CartItem-4659524ec943a35e925af5c7f2237469ef207a8ee900aca76ba99abc081b9fe7b79ba5865e6a0b606582011dee86d07173b576c0af240403c3e5758bdf3f4d48",
            "file": "src/app/core/models/cart-item.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Product } from './product.model';\r\n\r\nexport interface CartItem {\r\n  product: Product;\r\n  quantity: number;\r\n}",
            "properties": [
                {
                    "name": "product",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "Product",
            "id": "interface-Product-7c4271eb49b5a9bf8e36f0d6d01f20f89d8f4673f33b86ddbfc437ac51913599a75b1b213707b0cb0f538c85dee390c17c02111693402edf50c34bbc90b1033e",
            "file": "src/app/core/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  stock: number;\r\n  imageUrl?: string;\r\n}\r\n\r\nexport interface ProductStats {\r\n  totalProducts: number;\r\n  totalStock: number;\r\n  totalStockValue: number;\r\n  productsOutOfStock: number;\r\n  averageProductPrice: number;\r\n  highestStockProduct: { name: string; stock: number } | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "stock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductStats",
            "id": "interface-ProductStats-7c4271eb49b5a9bf8e36f0d6d01f20f89d8f4673f33b86ddbfc437ac51913599a75b1b213707b0cb0f538c85dee390c17c02111693402edf50c34bbc90b1033e",
            "file": "src/app/core/models/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  stock: number;\r\n  imageUrl?: string;\r\n}\r\n\r\nexport interface ProductStats {\r\n  totalProducts: number;\r\n  totalStock: number;\r\n  totalStockValue: number;\r\n  productsOutOfStock: number;\r\n  averageProductPrice: number;\r\n  highestStockProduct: { name: string; stock: number } | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "averageProductPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "highestStockProduct",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "productsOutOfStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalProducts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalStock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "totalStockValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-5b05ff88b90c489e145c2e9176ec8613f74d87610198f91b1b09badbf7f304f3ba1a205172fb2624a67603376166b9e8d40ff40f059d1d8b9a10bc418c1c7dcb",
            "file": "src/app/core/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  role: 'CUSTOMER' | 'ADMIN';\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"CUSTOMER\" | \"ADMIN\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-4bdf0dfb37b0646c3ed92968b76b8862d6c4e52d826603b5f42892773288c1ec5b520aadbc0b6c5d107498e4a399c435ac4366ae6ec60fe2d55edf2b52e20929",
            "file": "src/app/core/auth/auth.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:3000/api/auth'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAdmin$",
                    "defaultValue": "this.user$.pipe(\r\n    map(user => user?.role === 'ADMIN')\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "user$",
                    "defaultValue": "this.userSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "userSubject",
                    "defaultValue": "new BehaviorSubject<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkTokenOnLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVerifica si hay un token en localStorage al cargar la aplicación.\nSi el token existe y no ha expirado, actualiza el estado del usuario.\n",
                    "description": "<p>Verifica si hay un token en localStorage al cargar la aplicación.\nSi el token existe y no ha expirado, actualiza el estado del usuario.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nObtiene el token de localStorage.\nUsado principalmente por el AuthInterceptor.\n",
                    "description": "<p>Obtiene el token de localStorage.\nUsado principalmente por el AuthInterceptor.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "handleAuthentication",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProcesa el token después de un login exitoso.\n",
                    "description": "<p>Procesa el token después de un login exitoso.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1879,
                                "end": 1884,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1873,
                                "end": 1878,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>El token JWT.</p>\n"
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnvía las credenciales al backend para iniciar sesión.\n",
                    "description": "<p>Envía las credenciales al backend para iniciar sesión.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 855,
                                "end": 866,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "credentials"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 849,
                                "end": 854,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Objeto con email y password.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 903,
                                "end": 910,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Un observable con la respuesta del backend (que debería incluir el token y datos del usuario).</p>\n"
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCierra la sesión del usuario.\n",
                    "description": "<p>Cierra la sesión del usuario.</p>\n"
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "userData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnvía los datos de un nuevo usuario al backend para su registro.\n",
                    "description": "<p>Envía los datos de un nuevo usuario al backend para su registro.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1427,
                                "end": 1435,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "userData"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1421,
                                "end": 1426,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Objeto con name, email y password.</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1478,
                                "end": 1485,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Un observable con la respuesta del backend.</p>\n"
                        }
                    ]
                },
                {
                    "name": "saveToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGuarda el token en localStorage.\n",
                    "description": "<p>Guarda el token en localStorage.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2264,
                                "end": 2269,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2258,
                                "end": 2263,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>El token JWT recibido del backend.</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap, map } from 'rxjs';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { User } from '../models/user.model';\r\n\r\nconst TOKEN_KEY = 'auth-token';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:3000/api/auth'; // Corregido: la ruta es /api/auth\r\n\r\n  private userSubject = new BehaviorSubject<User | null>(null);\r\n  public user$: Observable<User | null> = this.userSubject.asObservable();\r\n\r\n  public isAdmin$: Observable<boolean> = this.user$.pipe(\r\n    map(user => user?.role === 'ADMIN')\r\n  );\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.checkTokenOnLoad();\r\n  }\r\n\r\n  /**\r\n   * Envía las credenciales al backend para iniciar sesión.\r\n   * @param credentials Objeto con email y password.\r\n   * @returns Un observable con la respuesta del backend (que debería incluir el token y datos del usuario).\r\n   */\r\n  login(credentials: { email: string, password: string }): Observable<any> {\r\n    return this.http.post<{ token: string }>(`${this.apiUrl}/login`, credentials).pipe(      tap(response => {\r\n        if (response && response.token) {\r\n          this.handleAuthentication(response.token);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Envía los datos de un nuevo usuario al backend para su registro.\r\n   * @param userData Objeto con name, email y password.\r\n   * @returns Un observable con la respuesta del backend.\r\n   */\r\n  register(userData: any): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/register`, userData);\r\n  }\r\n\r\n  /**\r\n   * Cierra la sesión del usuario.\r\n   */\r\n  logout(): void {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    this.userSubject.next(null);\r\n  }\r\n\r\n  /**\r\n   * Procesa el token después de un login exitoso.\r\n   * @param token El token JWT.\r\n   */\r\n  private handleAuthentication(token: string): void {\r\n    this.saveToken(token);\r\n    const decodedToken: any = jwtDecode(token);\r\n    const user: User = { id: decodedToken.id, email: decodedToken.email, name: decodedToken.name, role: decodedToken.role };\r\n    this.userSubject.next(user);\r\n  }\r\n\r\n  /**\r\n   * Guarda el token en localStorage.\r\n   * @param token El token JWT recibido del backend.\r\n   */\r\n  private saveToken(token: string): void {\r\n    localStorage.setItem(TOKEN_KEY, token);\r\n  }\r\n\r\n  /**\r\n   * Obtiene el token de localStorage.\r\n   * Usado principalmente por el AuthInterceptor.\r\n   */\r\n  public getToken(): string | null {\r\n    return localStorage.getItem(TOKEN_KEY);\r\n  }\r\n\r\n  /**\r\n   * Verifica si hay un token en localStorage al cargar la aplicación.\r\n   * Si el token existe y no ha expirado, actualiza el estado del usuario.\r\n   */\r\n  private checkTokenOnLoad(): void {\r\n    const token = this.getToken();\r\n    if (token) {\r\n      try {\r\n        const decodedToken: any = jwtDecode(token);\r\n        const isExpired = decodedToken.exp * 1000 < Date.now();\r\n\r\n        if (isExpired) {\r\n          this.logout();\r\n        } else {\r\n          const user: User = { id: decodedToken.id, email: decodedToken.email, name: decodedToken.name, role: decodedToken.role };\r\n          this.userSubject.next(user);\r\n        }\r\n      } catch (error) {\r\n        this.logout();\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CartService",
            "id": "injectable-CartService-4b2899729a53bdf2ba043f135aa5d1fd07c2e0f55d579a3be7fce9207fdade0e3b72b360c93291ad257944a386d7545c22c3f8e30d5fe76da44a4cd80a5690c9",
            "file": "src/app/core/state/cart.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:3000/api/cart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "items$",
                    "defaultValue": "this.itemsSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CartItem[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "itemsSubject",
                    "defaultValue": "new BehaviorSubject<CartItem[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.loadingSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loadingSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "totalItems$",
                    "defaultValue": "this.items$.pipe(\r\n    map(items => items.reduce((total, item) => total + item.quantity, 0))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "totalPrice$",
                    "defaultValue": "this.items$.pipe(\r\n    map(items => items.reduce((total, item) => total + (item.product.price * item.quantity), 0))\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nVacía completamente el carrito del usuario, tanto en el frontend como en el backend.\n",
                    "description": "<p>Vacía completamente el carrito del usuario, tanto en el frontend como en el backend.</p>\n",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loadInitialCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "removeProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateQuantity",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, map, finalize } from 'rxjs';\r\nimport { CartItem } from '../models/cart-item.model';\r\nimport { Product } from '../models/product.model';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { ListProductsUseCase } from '../../application/list-products.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private apiUrl = 'http://localhost:3000/api/cart';\r\n  private itemsSubject = new BehaviorSubject<CartItem[]>([]);\r\n  public items$: Observable<CartItem[]> = this.itemsSubject.asObservable();\r\n\r\n  private loadingSubject = new BehaviorSubject<boolean>(false);\r\n  public loading$: Observable<boolean> = this.loadingSubject.asObservable();\r\n\r\n  public totalItems$: Observable<number> = this.items$.pipe(\r\n    map(items => items.reduce((total, item) => total + item.quantity, 0))\r\n  );\r\n\r\n  public totalPrice$: Observable<number> = this.items$.pipe(\r\n    map(items => items.reduce((total, item) => total + (item.product.price * item.quantity), 0))\r\n  );\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService,\r\n    private listProductsUseCase: ListProductsUseCase\r\n  ) {\r\n    this.authService.user$.subscribe(user => {\r\n      if (user) {\r\n        this.loadInitialCart();\r\n      } else {\r\n        this.itemsSubject.next([]);\r\n      }\r\n    });\r\n  }\r\n\r\n  public loadInitialCart(): void {\r\n    this.loadingSubject.next(true);\r\n    this.http.get<any>(`${this.apiUrl}`).pipe(\r\n      map(response => response?.items || []),\r\n      finalize(() => this.loadingSubject.next(false))\r\n    ).subscribe({\r\n      next: items => this.itemsSubject.next(items),\r\n      error: err => {\r\n        console.error('Error al cargar el carrito:', err);\r\n        this.itemsSubject.next([]);\r\n      }\r\n    });\r\n  }\r\n\r\n  addProduct(product: Product): void {\r\n    const currentItems = this.itemsSubject.getValue();\r\n    const itemInCart = currentItems.find(item => item.product.id === product.id);\r\n    if (itemInCart) {\r\n      const newQuantity = itemInCart.quantity + 1;\r\n\r\n      if (product.stock<0) {\r\n        console.warn(`No se puede agregar más. Stock máximo (${product.stock}) alcanzado para ${product.name}.`);\r\n        return;\r\n      }\r\n\r\n      this.updateQuantity(product.id, newQuantity);\r\n    } else {\r\n      const payload = { productId: product.id, quantity: 1 };\r\n      this.loadingSubject.next(true);\r\n      this.http.post<any>(`${this.apiUrl}/items`, payload).pipe(\r\n        finalize(() => this.loadingSubject.next(false))\r\n      ).subscribe({\r\n        next: () => this.loadInitialCart(),\r\n        error: err => console.error('Error al añadir producto al carrito:', err)\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  removeProduct(productId: string): void {\r\n    this.loadingSubject.next(true);\r\n    this.http.delete<any>(`${this.apiUrl}/items/${productId}`).pipe(\r\n      finalize(() => this.loadingSubject.next(false))\r\n    ).subscribe({\r\n      next: () => {\r\n        this.loadInitialCart();\r\n        this.listProductsUseCase.refresh();\r\n      },\r\n      error: err => {\r\n        console.error('Error al eliminar producto del carrito:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  updateQuantity(productId: string, quantity: number): void {\r\n    const payload = { quantity };\r\n    this.loadingSubject.next(true);\r\n    this.http.patch<any>(`${this.apiUrl}/items/${productId}`, payload).pipe(\r\n      finalize(() => this.loadingSubject.next(false))\r\n    ).subscribe({\r\n      next: () => {\r\n        this.loadInitialCart();\r\n        this.listProductsUseCase.refresh();\r\n      },\r\n      error: err => {\r\n        console.error('Error al actualizar la cantidad del producto:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Vacía completamente el carrito del usuario, tanto en el frontend como en el backend.\r\n   */\r\n  public clearCart(): void {\r\n    this.loadingSubject.next(true);\r\n    this.http.post<any>(`${this.apiUrl}/clear`, {}).pipe(\r\n      finalize(() => this.loadingSubject.next(false))\r\n    ).subscribe({\r\n      next: () => {\r\n        this.itemsSubject.next([]);\r\n      },\r\n      error: err => console.error('Error al vaciar el carrito:', err)\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listProductsUseCase",
                        "type": "ListProductsUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listProductsUseCase",
                        "type": "ListProductsUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GetProductByIdUseCase",
            "id": "injectable-GetProductByIdUseCase-84c4aa2b643c823ea5f2d21031186cbb9470c8f1f40e0f0648f1031b4fe314a5c5f4bd66fd65c3c373f6dc3373ba24928b74bbd380043a4c3ca94bbadcadbca9",
            "file": "src/app/application/get-product-by-id.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:3000/api/products'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Product } from '../core/models/product.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetProductByIdUseCase {\r\n  private apiUrl = 'http://localhost:3000/api/products';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  execute(id: string): Observable<Product> {\r\n    return this.http.get<Product>(`${this.apiUrl}/${id}`);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ListProducts",
            "id": "injectable-ListProducts-6b7300c96da72a11ea858a7c4c47c06bede445e575d2c03354659e0b54e57248136393e5ca01e3a94e8917a8163923fc34a4db59e1ef19221ed92fbc5c170b7b",
            "file": "src/app/application/list-products.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ListProducts {\r\n  \r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ListProductsUseCase",
            "id": "injectable-ListProductsUseCase-339e2f332d62c9e941676fe489cd57d5ff7f0fc626988c29667927a273d241905ac1556d25810597465b54701868ef8c0ba343020cdaf949239ac2af91b2a8aa",
            "file": "src/app/application/list-products.service.ts",
            "properties": [
                {
                    "name": "products$",
                    "defaultValue": "this.productsSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Product[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "productsSubject",
                    "defaultValue": "new BehaviorSubject<Product[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Product[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { Product } from '../core/models/product.model';\r\nimport { ProductRepository } from '../infrastructure/product-repository.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ListProductsUseCase {\r\n  private productsSubject = new BehaviorSubject<Product[]>([]);\r\n  public products$: Observable<Product[]> = this.productsSubject.asObservable();\r\n\r\n  constructor(private productRepository: ProductRepository) {\r\n    this.refresh();\r\n  }\r\n\r\n  execute(): Observable<Product[]> {\r\n    return this.products$;\r\n  }\r\n\r\n  public refresh(): void {\r\n    this.productRepository.getAllProducts().pipe(\r\n      tap(products => this.productsSubject.next(products))\r\n    ).subscribe();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productRepository",
                        "type": "ProductRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "productRepository",
                        "type": "ProductRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OrderService",
            "id": "injectable-OrderService-74802a9f34348c742aa2a5efb1d40ceab8256fe3840fd8a4b4002244ef5642e0e321126210689e0cf200c3ce032bc4e5f1868ffaef151d15a4205d45f92f49f6",
            "file": "src/app/core/services/order.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "checkout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSimula el proceso de checkout.\nLimpia el carrito, muestra una alerta y redirige al usuario.\n",
                    "description": "<p>Simula el proceso de checkout.\nLimpia el carrito, muestra una alerta y redirige al usuario.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { CartService } from '../state/cart.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n\r\n  constructor(\r\n    private cartService: CartService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  /**\r\n   * Simula el proceso de checkout.\r\n   * Limpia el carrito, muestra una alerta y redirige al usuario.\r\n   */\r\n  checkout(): void {\r\n    this.cartService.clearCart();\r\n    alert('¡Gracias por tu compra! Tu pedido ha sido procesado.');\r\n    this.router.navigate(['/products']);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductRepository",
            "id": "injectable-ProductRepository-f347a2dd0f0ed03593a997a0186be4cb73ada263893a1254dbaa661ecde39c6861135c1d0122c968ac0695a4683b732bb64be3dcc85e87e25ec2534bbeb6e193",
            "file": "src/app/infrastructure/product-repository.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:3000/api/products'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAllProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Product[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Product } from '../core/models/product.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductRepository {\r\n  private apiUrl = 'http://localhost:3000/api/products';\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getAllProducts(): Observable<Product[]> {\r\n    return this.http.get<Product[]>(this.apiUrl);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductService",
            "id": "injectable-ProductService-20cb541956a24461a7fe2a0ec5c2e1a6abb14e497291630b22c6b7f79c97cc6a039890c57f6546631083361ed0cf3021add3a66e9ee8dbbfe297568b8d5d78a9",
            "file": "src/app/core/services/product.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:3000/api/products'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "productData",
                            "type": "Partial<Product>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "Partial<Product>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductStats",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ProductStats>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "productData",
                            "type": "Partial<Product>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "productData",
                            "type": "Partial<Product>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Product, ProductStats } from '../models/product.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductService {\r\n  private apiUrl = 'http://localhost:3000/api/products';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getProductById(productId: string): Observable<Product> {\r\n    return this.http.get<Product>(`${this.apiUrl}/${productId}`);\r\n  }\r\n\r\n  deleteProduct(productId: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${productId}`);\r\n  }\r\n\r\n  updateProduct(productId: string, productData: Partial<Product>): Observable<Product> {\r\n    return this.http.put<Product>(`${this.apiUrl}/${productId}`, productData);\r\n  }\r\n\r\n  createProduct(productData: Partial<Product>): Observable<Product> {\r\n    return this.http.post<Product>(this.apiUrl, productData);\r\n  }\r\n\r\n  getProductStats(): Observable<ProductStats> {\r\n    return this.http.get<ProductStats>(`${this.apiUrl}/summary/stats`);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-ec9e487eaa5142811da38de632a1d8bf8c6a377816a059acd6a0d24e3415b9cc7d039bfe0a31fc1fbd5b5cb1dfabb26763f6a22a58898d3a7f40281ff70fc407",
            "file": "src/app/pages/about/about.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./about.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-about',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './about.component.html',\r\n  styleUrl: './about.component.scss'\r\n})\r\nexport class AboutComponent {\r\n\r\n}\r\n",
            "styleUrl": "./about.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"about-page\">\r\n  <div class=\"about-container\">\r\n    <header class=\"about-header\">\r\n      <h1>Sobre GamerStore</h1>\r\n      <p>Tu destino número uno para hardware y periféricos de gaming.</p>\r\n    </header>\r\n\r\n    <section class=\"about-content\">\r\n      <h2>Nuestra Misión</h2>\r\n      <p>\r\n        En GamerStore, nuestra misión es simple: equipar a cada gamer con las herramientas que necesita para alcanzar la victoria. Creemos que el equipo adecuado puede marcar la diferencia entre una partida buena y una legendaria. Por eso, seleccionamos cuidadosamente cada producto de nuestro catálogo, asegurándonos de ofrecer solo lo mejor en rendimiento, durabilidad y estilo.\r\n      </p>\r\n\r\n      <h2>Nuestra Historia</h2>\r\n      <p>\r\n        GamerStore nació de la pasión de un grupo de amigos gamers que estaban cansados de buscar en múltiples sitios para encontrar el equipo perfecto. Decidimos crear una tienda única donde la comunidad pudiera encontrar todo lo que necesita, desde teclados mecánicos y mouses de alta precisión hasta los monitores más rápidos y las sillas más cómodas.\r\n      </p>\r\n      <p>\r\n        Desde nuestros humildes comienzos en un pequeño garaje, hemos crecido hasta convertirnos en un referente en la comunidad gamer, siempre manteniendo nuestro compromiso con la calidad y el servicio al cliente.\r\n      </p>\r\n    </section>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "App",
            "id": "component-App-1e32ea619ef410decdd5d3c58b63c1bbf07cbc8aae7701d70106fa845ab0150f11f5b7e31cc131b824deb7666f578ab66f622c0f9232f9894895711a33543a35",
            "file": "src/app/app.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "signal('frontend')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, signal } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { HeaderComponent } from './layout/header/header.component';\r\nimport { FooterComponent } from './layout/footer/footer.component';\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet, HeaderComponent, FooterComponent],\r\n  templateUrl: './app.html',\r\n  styleUrl: './app.scss'\r\n})\r\nexport class App {\r\n  protected readonly title = signal('frontend');\r\n}\r\n",
            "styleUrl": "./app.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-header></app-header>\r\n\r\n<main>\r\n  <router-outlet />\r\n</main>\r\n\r\n<app-footer></app-footer>\r\n"
        },
        {
            "name": "CartComponent",
            "id": "component-CartComponent-38e4171032e1f20c4c363f968df861cfe1c8413eaa679dd5ab01636ecf8c90ff448c493b3560eab4733d20a0f5c31644bfaf87d06a1560b35c9191d605c81d9c",
            "file": "src/app/pages/cart/cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cartItems$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CartItem[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "totalPrice$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCheckout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onQuantityChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemoveProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "CurrencyPipe",
                    "type": "pipe"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "CartItemComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CartService } from '../../core/state/cart.service';\nimport { Observable } from 'rxjs';\nimport { CartItem } from '../../core/models/cart-item.model'; \nimport { AsyncPipe, CurrencyPipe } from '@angular/common';\nimport { Router, RouterLink } from '@angular/router';\nimport { OrderService } from '../../core/services/order.service';\nimport { CartItemComponent } from '../../shared/components/cart-item/cart-item.component';\n\n@Component({\n  selector: 'app-cart',\n  standalone: true,\n  imports: [AsyncPipe, CurrencyPipe, RouterLink, CartItemComponent],\n  templateUrl: './cart.component.html',\n  styleUrl: './cart.component.scss',\n})\nexport class CartComponent implements OnInit {\n  cartItems$: Observable<CartItem[]>;\n  totalPrice$: Observable<number>;\n  isLoading$: Observable<boolean>;\n\n  constructor(\n    private cartService: CartService,\n    private orderService: OrderService,\n    private router: Router\n  ) {\n    this.cartItems$ = this.cartService.items$;\n    this.totalPrice$ = this.cartService.totalPrice$;\n    this.isLoading$ = this.cartService.loading$;\n  }\n\n  ngOnInit(): void {\n    this.cartService.loadInitialCart();\n  }\n\n  onRemoveProduct(productId: string): void {\n    this.cartService.removeProduct(productId);\n  }\n\n  onQuantityChange(event: { productId: string; quantity: number }): void {\n    this.cartService.updateQuantity(event.productId, event.quantity);\n  }\n\n  onCheckout(): void {\n    this.orderService.checkout();\n  }\n}\n",
            "styleUrl": "./cart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "orderService",
                        "type": "OrderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "orderService",
                        "type": "OrderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"cart-page\">\n  <div class=\"cart-container\">\n    <header class=\"cart-header\">\n      <h1>Carrito de Compras</h1>\n    </header>\n\n    @if (cartItems$ | async; as items) {\n\n      @if (items.length > 0) {\n        <div class=\"cart-layout\" [class.loading]=\"isLoading$ | async\">\n          <div class=\"cart-items\">\n            <h2>Tus Productos</h2>\n\n            @for (item of items; track item.product.id) {\n              <app-cart-item [item]=\"item\" [isLoading]=\"(isLoading$ | async) ?? false\"\n                             (remove)=\"onRemoveProduct($event)\"\n                             (quantityChange)=\"onQuantityChange($event)\"></app-cart-item>\n            }\n          </div>\n\n          <div class=\"order-summary\">\n            <h2>Resumen del Pedido</h2>\n            <div class=\"summary-row total\"><p>Total:</p> <p>{{ (totalPrice$ | async) | currency:'ARS' }}</p></div>\n            <button class=\"checkout-btn\" (click)=\"onCheckout()\" [disabled]=\"(isLoading$ | async) || (cartItems$ | async)?.length === 0\">Proceder al Pago</button>          </div>\n        </div>\n      } @else {\n        <div class=\"cart-empty\">\n          <h2>Tu carrito está vacío</h2>\n          <p>¡Añade productos para verlos aquí!</p>\n          <a routerLink=\"/products\" class=\"back-to-shop-btn\">Ver Productos</a>\n        </div>\n      }\n    }\n  </div>\n</div>\n"
        },
        {
            "name": "CartItemComponent",
            "id": "component-CartItemComponent-9e492708624f4f924afb98959fa3a44e5d7aa208a2bb9c7c65daa1a70d0b5b2dffaa9cd675c0a7ba827bba8069562772c1dc071f4450a114914a33a2f2e7c0c0",
            "file": "src/app/shared/components/cart-item/cart-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart-item",
            "styleUrls": [
                "./cart-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "CartItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "quantityChange",
                    "defaultValue": "new EventEmitter<{ productId: string; quantity: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onQuantityChange",
                    "args": [
                        {
                            "name": "newQuantity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newQuantity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CurrencyPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CartItem } from '../../../core/models/cart-item.model';\nimport { CurrencyPipe } from '@angular/common';\n\n@Component({\n  selector: 'app-cart-item',\n  standalone: true,\n  imports: [CurrencyPipe],\n  templateUrl: './cart-item.component.html',\n  styleUrls: ['./cart-item.component.scss'],\n})\nexport class CartItemComponent {\n  @Input() item!: CartItem;\n  @Input() isLoading = false;\n\n  @Output() remove = new EventEmitter<string>();\n  @Output() quantityChange = new EventEmitter<{ productId: string; quantity: number }>();\n\n  onQuantityChange(newQuantity: string): void {\n    const quantity = parseInt(newQuantity, 10);\n    if (!isNaN(quantity) && quantity > 0) {\n      this.quantityChange.emit({ productId: this.item.product.id, quantity });\n    }\n  }\n\n  onRemove(): void {\n    this.remove.emit(this.item.product.id);\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  --container-bg: #1a1a1d;\n  --input-bg: #252a34;\n  --text-color: #c5c6c7;\n  --accent-color: #66fcf1;\n  --border-color: #4b5d67;\n  --error-color: #ff6b6b;\n}\n\n.cart-item-container {\n  display:flex;\n  flex: 3;\n  min-width: 300px;\n  background-color: var(--container-bg);\n  padding: 25px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);\n  border: 1px solid var(--border-color);\n\n  h2 {\n    margin-top: 0;\n    margin-bottom: 25px;\n    font-size: 1.8rem;\n    color: white;\n  }\n}\n\n.item-img {\n  width: 80px;\n  height: 80px;\n  object-fit: cover;\n  border-radius: 4px;\n}\n\n.item-details {\n  flex-grow: 1;\n}\n\n.item-name {\n  font-weight: 600;\n  font-size: 1.1rem;\n  margin: 0 0 5px;\n  color: white;\n}\n\n.item-price {\n  margin: 0;\n  color: var(--text-color);\n}\n\n.item-quantity input {\n  width: 60px;\n  padding: 8px;\n  text-align: center;\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  background-color: var(--input-bg);\n  color: white;\n  font-size: 1rem;\n  transition: border-color 0.3s ease, box-shadow 0.3s ease;\n\n  &:focus {\n    outline: none;\n    border-color: var(--accent-color);\n    box-shadow: 0 0 0 3px rgba(102, 252, 241, 0.2);\n  }\n\n  &:disabled {\n    opacity: 0.7;\n    cursor: not-allowed;\n  }\n}\n\n.item-remove-btn {\n  background: none;\n  border: none;\n  color: var(--error-color);\n  cursor: pointer;\n  font-size: 0.9rem;\n  font-weight: bold;\n  padding: 5px;\n  transition: opacity 0.2s;\n\n  &:hover:not(:disabled) {\n    text-decoration: underline;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n.cart-item {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  padding: 20px 0;\n  border-bottom: 1px solid var(--border-color);\n\n  &:last-child {\n    border-bottom: none;\n  }\n}\n\n.item-img {\n  width: 80px;\n  height: 80px;\n  object-fit: cover;\n  border-radius: 4px;\n}\n\n.item-details {\n  flex-grow: 1;\n}\n\n.item-name {\n  font-weight: 600;\n  font-size: 1.1rem;\n  margin: 0 0 5px;\n  color: white;\n}\n\n.item-price {\n  margin: 0;\n  color: var(--text-color);\n}\n\n.item-quantity input {\n  width: 60px;\n  padding: 8px;\n  text-align: center;\n  border: 1px solid var(--border-color);\n  border-radius: 4px;\n  background-color: var(--input-bg);\n  color: white;\n  font-size: 1rem;\n  transition: border-color 0.3s ease, box-shadow 0.3s ease;\n\n  &:focus {\n    outline: none;\n    border-color: var(--accent-color);\n    box-shadow: 0 0 0 3px rgba(102, 252, 241, 0.2);\n  }\n}\n\n.item-remove-btn {\n  background: none;\n  border: none;\n  color: var(--error-color);\n  cursor: pointer;\n  font-size: 0.9rem;\n  font-weight: bold;\n  padding: 5px;\n\n  &:hover {\n    text-decoration: underline;\n  }\n}\n",
                    "styleUrl": "./cart-item.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"cart-item-container\">\n  <img [src]=\"item.product.imageUrl\" [alt]=\"item.product.name\" class=\"item-img\">\n  <div class=\"item-details\">\n    <p class=\"item-name\">{{ item.product.name }}</p>\n    <p class=\"item-price\">{{ item.product.price | currency:'ARS' }}</p>\n  </div>\n  <div class=\"item-quantity\">\n    <input #quantityInput type=\"number\" [value]=\"item.quantity\" min=\"1\"\n           (change)=\"onQuantityChange(quantityInput.value)\"\n           [disabled]=\"isLoading\">\n  </div>\n  <button class=\"item-remove-btn\" (click)=\"onRemove()\" [disabled]=\"isLoading\">Eliminar</button>\n</div>"
        },
        {
            "name": "CheckoutComponent",
            "id": "component-CheckoutComponent-d68149fc546dfd60e0d482050f781f051adafceeae35fce3b8d310ffdf215be2b5177a140ace90435a56766c7d6c1f592302b9ac687f75ca3526ce5e6eff166b",
            "file": "src/app/pages/checkout/checkout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-checkout',\n  standalone: true,\n  imports: [],\n  templateUrl: './checkout.component.html',\n  styleUrl: './checkout.component.scss'\n})\nexport class CheckoutComponent {\n\n}\n",
            "styleUrl": "./checkout.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>checkout works!</p>\r\n"
        },
        {
            "name": "ContactComponent",
            "id": "component-ContactComponent-9928efadde7a7104f968cf9b3865a07c8bfcaa48603ebd598242e8fba17322a379e49e91b6b0564b71a10e104bcb17cf5ee0897b4e82e9a66e4a1f73aa20ee55",
            "file": "src/app/pages/contact/contact.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-contact",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./contact.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-contact',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './contact.component.html',\r\n  styleUrl: './contact.component.scss'\r\n})\r\nexport class ContactComponent {\r\n\r\n}\r\n",
            "styleUrl": "./contact.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"contact-page\">\r\n  <div class=\"contact-container\">\r\n    <header class=\"contact-header\">\r\n      <h1>Contáctanos</h1>\r\n      <p>¿Tienes alguna pregunta o comentario? Nos encantaría saber de ti.</p>\r\n    </header>\r\n\r\n    <div class=\"contact-content\">\r\n      <div class=\"contact-form-container\">\r\n        <h2>Envíanos un mensaje</h2>\r\n        <form class=\"contact-form\" (submit)=\"$event.preventDefault()\">\r\n          <div class=\"form-group\">\r\n            <label for=\"name\">Nombre</label>\r\n            <input type=\"text\" id=\"name\" name=\"name\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">Correo Electrónico</label>\r\n            <input type=\"email\" id=\"email\" name=\"email\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"message\">Mensaje</label>\r\n            <textarea id=\"message\" name=\"message\" rows=\"6\" required></textarea>\r\n          </div>\r\n          <button type=\"submit\" class=\"submit-btn\">Enviar Mensaje</button>\r\n        </form>\r\n      </div>\r\n\r\n      <div class=\"contact-info\">\r\n        <h2>Información de Contacto</h2>\r\n        <p><strong>Correo Electrónico:</strong><br>soporte&#64;gamerstore.com</p>\r\n        <p><strong>Teléfono:</strong><br>+54 9 11 1234-5678</p>\r\n        <p><strong>Horario de Atención:</strong><br>Lunes a Viernes, 9:00 - 18:00</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-a62c45e28b81a156adba92e6f4d43171d46a5dac96f0d31e7d61db53497785e21d7fac2a57dc2b2f979bd20e942b646f40fd606d80f2b40ac89206b998ce2c3e",
            "file": "src/app/pages/admin/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "stats$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProductStats>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CurrencyPipe",
                    "type": "pipe"
                },
                {
                    "name": "StatCardComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\nimport {CommonModule, CurrencyPipe} from '@angular/common';\nimport {Observable} from 'rxjs';\nimport {ProductService} from '../../../core/services/product.service';\nimport {ProductStats} from '../../../core/models/product.model';\nimport { StatCardComponent } from '../../../shared/components/stat-card/stat-card.component';\n\n@Component({\n  selector: 'app-dashboard',\n  standalone: true,\n  imports: [CommonModule, CurrencyPipe, StatCardComponent],\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent {\n  stats$!: Observable<ProductStats>;\n\n  constructor(private productService: ProductService) {\n  }\n\n  ngOnInit(): void {\n    this.stats$ = this.productService.getProductStats();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  --page-bg: #0b0c10;\r\n  --container-bg: #1a1a1d;\r\n  --text-color: #c5c6c7;\r\n  --accent-color: #66fcf1;\r\n  --border-color: #4b5d67;\r\n  --error-color: #ff6b6b;\r\n}\r\n\r\n.dashboard-container {\r\n  padding: 40px 20px;\r\n  background-color: var(--page-bg);\r\n  min-height: calc(100vh - 70px);\r\n\r\n  h1 {\r\n    font-size: 2.5rem;\r\n    color: white;\r\n    text-align: center;\r\n    margin-bottom: 40px;\r\n  }\r\n}\r\n\r\n.stats-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n  gap: 30px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.stat-card {\r\n  background-color: var(--container-bg);\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 10px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n\r\n  &:hover {\r\n    transform: translateY(-5px);\r\n    box-shadow: 0 8px 20px rgba(102, 252, 241, 0.1);\r\n  }\r\n}\r\n\r\n.stat-icon {\r\n  font-size: 3rem;\r\n  line-height: 1;\r\n}\r\n\r\n.stat-info {\r\n  text-align: center;\r\n\r\n  .stat-value {\r\n    font-size: 2.2rem;\r\n    font-weight: 700;\r\n    color: white;\r\n    margin: 0;\r\n    word-break: break-all;\r\n  }\r\n  .stat-value.small-text {\r\n    font-size: 1.5rem;\r\n    word-break: break-word;\r\n  }\r\n  .stat-label {\r\n    font-size: 1rem;\r\n    color: var(--text-color);\r\n    margin: 5px 0 0;\r\n  }\r\n}\r\n\r\n.stat-card.out-of-stock {\r\n  .stat-icon {\r\n    color: var(--error-color);\r\n  }\r\n  .stat-value {\r\n    color: var(--error-color);\r\n  }\r\n}\r\n\r\n.loading-message {\r\n  text-align: center;\r\n  font-size: 1.5rem;\r\n  color: var(--text-color);\r\n  padding: 50px;\r\n}\r\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"dashboard-container\">\n  <h1>Panel de Administración</h1>\n\n  @if (stats$ | async; as stats) {\n    <div class=\"stats-grid\">\n      <app-stat-card icon=\"📦\" label=\"Productos Diferentes\">\n        <p class=\"stat-value\">{{ stats.totalProducts }}</p>\n      </app-stat-card>\n\n      <app-stat-card icon=\"📈\" label=\"Unidades en Stock\">\n        <p class=\"stat-value\">{{ stats.totalStock }}</p>\n      </app-stat-card>\n\n      <app-stat-card icon=\"💰\" label=\"Valor Total del Stock\">\n        <p class=\"stat-value\">{{ stats.totalStockValue | currency:'ARS':'$' }}</p>\n      </app-stat-card>\n\n      <app-stat-card icon=\"⚠️\" label=\"Productos sin Stock\" class=\"out-of-stock\">\n        <p class=\"stat-value\">{{ stats.productsOutOfStock }}</p>\n      </app-stat-card>\n\n      <app-stat-card icon=\"📊\" label=\"Precio Promedio\">\n        <p class=\"stat-value\">{{ stats.averageProductPrice | currency:'ARS':'$' }}</p>\n      </app-stat-card>\n\n      <app-stat-card icon=\"👑\" [label]=\"stats.highestStockProduct ? 'Producto con más stock (' + stats.highestStockProduct.stock + ' u.)' : 'Producto con más stock'\">\n        <p class=\"stat-value small-text\">{{ stats.highestStockProduct?.name || 'N/A' }}</p>\n      </app-stat-card>\n    </div>\n  } @else {\n    <p class=\"loading-message\">Cargando estadísticas...</p>\n  }\n</div>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-d1fc9ee76253d8ca897eb76f39c8d36825fb099bd45900fb5b754946eaecf1e204d4830f78928447625fca2275d94290846286d514e69415a8032f2d4003c60a",
            "file": "src/app/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n@Component({\r\n  selector: 'app-footer',\r\n  standalone: true,\r\n  imports: [RouterModule],\r\n  templateUrl: './footer.component.html',\r\n  styleUrl: './footer.component.scss'\r\n})\r\nexport class FooterComponent {\r\n\r\n}\r\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<footer class=\"footer\">\r\n  <div class=\"footer-container\">\r\n    <div class=\"footer-copyright\">\r\n      <p>&copy; 2024 GamerStore. Todos los derechos reservados.</p>\r\n    </div>\r\n    <div class=\"footer-links\">\r\n      <a routerLink=\"/privacy-policy\">Política de Privacidad</a>\r\n      <a routerLink=\"/terms-of-service\">Términos de Servicio</a>\r\n    </div>\r\n  </div>\r\n</footer>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-f7ce6ecb239e0df8e4daf2002c183aedbeb0e1c6dccb2d9bae115933410ea4268598d97baf82fb03fa4e44f9be1a78d027f44acc6428fa0659b2063660efccea",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAdmin$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "totalItemsInCart$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router, RouterLink } from '@angular/router';import { CartService } from '../../core/state/cart.service';\nimport { Observable } from 'rxjs';\nimport { AsyncPipe } from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '../../core/auth/auth.service';\nimport { User } from '../../core/models/user.model';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss'\n})\nexport class HeaderComponent {\n  totalItemsInCart$: Observable<number>;\n  user$: Observable<User | null>;\n  isAdmin$: Observable<boolean>;\n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.totalItemsInCart$ = this.cartService.totalItems$;\n    this.user$ = this.authService.user$;\n    this.isAdmin$ = this.authService.isAdmin$;\n  }\n  logout(): void {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n}\n",
            "styleUrl": "./header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<header class=\"header\">\r\n  <div class=\"header-container\">\r\n    <div class=\"header-logo\">\r\n      <a routerLink=\"/\">\r\n        <svg width=\"40\" height=\"40\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M9 3L4.5 6L9 9M15 3L19.5 6L15 9\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n          <path d=\"M4.5 18L9 21L13.5 18\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n          <path d=\"M19.5 18L15 21L10.5 18\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n          <path d=\"M4.5 6V18\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n          <path d=\"M19.5 6V18\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n          <path d=\"M9 9L13.5 12L9 15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n        </svg>\r\n        <span>GamerStore</span>\r\n      </a>\r\n    </div>\r\n    <nav class=\"header-nav\">\r\n      <a routerLink=\"/products\" routerLinkActive=\"active\">Productos</a>\r\n      <a routerLink=\"/about\" routerLinkActive=\"active\">Nosotros</a>\r\n      <a routerLink=\"/contact\" routerLinkActive=\"active\">Contacto</a>\r\n      @if (isAdmin$ | async) {\r\n        <a routerLink=\"/admin\" routerLinkActive=\"active\" class=\"admin-link\">Admin</a>\r\n      }\r\n    </nav>\r\n    <div class=\"header-actions\">\r\n      @if (user$ | async; as user) {\r\n        <span class=\"user-greeting\">Hola, {{ user.name }}</span>\r\n        <a (click)=\"logout()\" class=\"nav-link logout-button\">Cerrar Sesión</a>\r\n        <a routerLink=\"/cart\" class=\"cart-button\">\r\n          <span class=\"cart-icon\">🛒</span>\r\n          @if (totalItemsInCart$ | async; as total) {\r\n            @if (total > 0) { <span class=\"cart-count\">{{ total }}</span> }\r\n          }\r\n        </a>\r\n      } @else {\r\n        <a routerLink=\"/login\" class=\"auth-link login\">Iniciar Sesión</a>\r\n        <a routerLink=\"/register\" class=\"auth-link register\">Registrarse</a>\r\n      }\r\n    </div>\r\n  </div>\r\n</header>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-17e25cc4a465d997a3cad7b468082063ec2bc9f9f20c06ec0768cea25adcb5e08f1547d815084e4081dd46203499df4489bdc5b533b9a478c4395b4068b982b0",
            "file": "src/app/pages/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport {Router, RouterLink} from '@angular/router';\r\nimport { AuthService } from '../../core/auth/auth.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    RouterLink\r\n  ],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss'\r\n})\r\nexport class LoginComponent {\r\n  loginForm: FormGroup;\r\n  errorMessage: string | null = null;\r\n  isLoading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    this.errorMessage = null;\r\n    this.authService.login(this.loginForm.value).subscribe({\r\n      next: () => this.router.navigate(['/products']),\r\n      error: () => this.errorMessage = 'Credenciales inválidas. Por favor, inténtalo de nuevo.',\r\n      complete: () => this.isLoading = false\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"login-container\">\r\n  <form class=\"login-form\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n    <h2>Iniciar Sesión</h2>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"email\">Email</label>\r\n      <input id=\"email\" type=\"email\" formControlName=\"email\" placeholder=\"tu@email.com\">\r\n      @if (loginForm.get('email')?.invalid && (loginForm.get('email')?.dirty || loginForm.get('email')?.touched)) {\r\n        <div class=\"error-message\">\r\n          @if (loginForm.get('email')?.hasError) {\r\n            <p>El email es requerido.</p>\r\n          }\r\n          @if (loginForm.get('email')?.hasError) {\r\n            <p>Por favor, introduce un email válido.</p>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"password\">Contraseña</label>\r\n      <input id=\"password\" type=\"password\" formControlName=\"password\" placeholder=\"••••••••\">\r\n      @if (loginForm.get('password')?.invalid && (loginForm.get('password')?.dirty || loginForm.get('password')?.touched)) {\r\n        <div class=\"error-message\">\r\n          @if (loginForm.get('password')?.hasError) {\r\n            <p>La contraseña es requerida.</p>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n\r\n    @if (errorMessage) {\r\n      <div class=\"error-message server-error\">{{ errorMessage }}</div>\r\n    }\r\n\r\n    <button type=\"submit\" [disabled]=\"loginForm.invalid || isLoading\">\r\n      {{ isLoading ? 'Cargando...' : 'Iniciar Sesión' }}\r\n    </button>\r\n\r\n    <div class=\"register-link\">\r\n      <span>¿No tienes una cuenta? <a routerLink=\"/register\">Regístrate aquí</a></span>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "ProductCardComponent",
            "id": "component-ProductCardComponent-ec07a37b7b348fb51a6968f68822ecc4df8f66c76cf3d196d3aec5b33fb58a2799552b3e7e0b9a782f5e1a72c81edf87cd7cae9316d7e505f6ca005af980026a",
            "file": "src/app/shared/components/product-card/product-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-card",
            "styleUrls": [
                "./product-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "product",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Product",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAdmin$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "onAddToCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CurrencyPipe",
                    "type": "pipe"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { Product } from '../../../core/models/product.model';\r\nimport { RouterLink } from '@angular/router';\r\nimport { CommonModule, CurrencyPipe } from '@angular/common';\r\nimport { CartService } from '../../../core/state/cart.service';\r\nimport { AuthService } from '../../../core/auth/auth.service';\r\nimport { ProductService } from '../../../core/services/product.service';\r\nimport { ListProductsUseCase } from '../../../application/list-products.service';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../../../core/models/user.model';\r\n\r\n@Component({\r\n  selector: 'app-product-card',\r\n  standalone: true,\r\n  imports: [CurrencyPipe, CommonModule, RouterLink],\r\n  templateUrl: './product-card.component.html',\r\n  styleUrls: ['./product-card.component.scss']\r\n})\r\nexport class ProductCardComponent {\r\n  @Input() product!: Product;\r\n  user$: Observable<User | null>;\r\n  isAdmin$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private cartService: CartService,\r\n    private authService: AuthService,\r\n    private productService: ProductService,\r\n    private listProductsUseCase: ListProductsUseCase\r\n  ) {\r\n    this.user$ = this.authService.user$;\r\n    this.isAdmin$ = this.authService.isAdmin$;\r\n  }\r\n\r\n  onAddToCart(): void {\r\n    this.cartService.addProduct(this.product);\r\n  }\r\n\r\n  onDeleteProduct(): void {\r\n    if (!this.product || !this.product.id) return;\r\n\r\n    if (confirm(`¿Estás seguro de que quieres eliminar \"${this.product.name}\"?`)) {\r\n      this.productService.deleteProduct(this.product.id).subscribe({\r\n        next: () => {\r\n          console.log('Producto eliminado con éxito');\r\n          this.listProductsUseCase.refresh();\r\n        },\r\n        error: (err) => {\r\n          console.error('Error al eliminar el producto:', err);\r\n          alert('Hubo un error al eliminar el producto.');\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  --card-bg: #1a1a1d;\r\n  --text-color: #c5c6c7;\r\n  --accent-color: #66fcf1;\r\n  --accent-hover-color: #45a29e;\r\n  --border-color: #4b5d67;\r\n  --error-color: #ff6b6b;\r\n}\r\n\r\n.card {\r\n  background-color: var(--card-bg);\r\n  border: 1px solid var(--border-color);  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n\r\n  &:hover {\r\n    transform: translateY(-5px);\r\n    box-shadow: 0 8px 20px rgba(102, 252, 241, 0.1);\r\n  }\r\n\r\n  &.out-of-stock {\r\n    opacity: 0.6;\r\n  }\r\n}\r\n.card-link {\r\n  text-decoration: none;\r\n  color: inherit;\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-grow: 1;\r\n}\r\n.card-img {\r\n  width: 100%;\r\n  height: 200px;\r\n  object-fit: cover;\r\n  background-color: #252a34;\r\n}\r\n\r\n.card-body {\r\n  padding: 16px;\r\n  flex-grow: 1;\r\n}\r\n\r\n.card-title {\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  margin: 0 0 8px;\r\n  color: #ffffff;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.card-price {\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  color: var(--accent-color);\r\n  margin: 0;\r\n}\r\n\r\n.card-footer {\r\n  padding: 0 16px 16px;\r\n  margin-top: auto;\r\n}\r\n\r\n.card-button {\r\n  width: 100%;\r\n  padding: 12px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: var(--accent-color);\r\n  color: var(--card-bg);\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n\r\n  &:hover:not(:disabled) {\r\n    background-color: var(--accent-hover-color);\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #4b5d67;\r\n    cursor: not-allowed;\r\n    opacity: 0.7;\r\n  }\r\n}\r\n\r\n.admin-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.admin-button {\r\n  flex: 1;\r\n  padding: 10px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  transition: opacity 0.2s;\r\n  font-size: 0.9rem;\r\n\r\n  &.edit {\r\n    background-color: var(--border-color);\r\n    color: var(--text-color);\r\n  }\r\n\r\n  &.delete {\r\n    background-color: var(--error-color);\r\n    color: white;\r\n  }\r\n\r\n  &:hover {\r\n    opacity: 0.8;\r\n  }\r\n}\r\n",
                    "styleUrl": "./product-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listProductsUseCase",
                        "type": "ListProductsUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listProductsUseCase",
                        "type": "ListProductsUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"card\" [class.out-of-stock]=\"product.stock === 0\">\r\n  <a [routerLink]=\"['/products', product.id]\" class=\"card-link\">\r\n    <img [src]=\"product.imageUrl\" alt=\"{{ product.name }}\" class=\"card-img\" />    <div class=\"card-body\">      <h3 class=\"card-title\">{{ product.name }}</h3>\r\n      <p class=\"card-price\">{{ product.price | currency:'ARS' }}</p>\r\n    </div>\r\n  </a>\r\n  @if (user$ | async; as user) {\r\n    <div class=\"card-footer\">\r\n      @if (isAdmin$ | async) {\r\n        <div class=\"admin-actions\">\r\n          <a [routerLink]=\"['/admin/products/edit', product.id]\" class=\"admin-button edit\">Editar</a>\r\n          <button (click)=\"onDeleteProduct()\" class=\"admin-button delete\">Eliminar</button>\r\n        </div>\r\n      } @else {\r\n        <button class=\"card-button\" [disabled]=\"product.stock === 0\" (click)=\"onAddToCart()\">{{ product.stock > 0 ? 'Agregar al Carrito' : 'Sin Stock' }}</button>\r\n      }\r\n    </div>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "ProductDetailComponent",
            "id": "component-ProductDetailComponent-817a11f2a33d93dbed7051f911df258d2c74355c291473b03276ffdc501472b5ad14dda0e59b400639918e8c2b9c07d73d4985b9ecb33b5af58f93df92b19883",
            "file": "src/app/pages/product-detail/product-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-detail",
            "styleUrls": [
                "./product-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-detail.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cartService",
                    "defaultValue": "inject(CartService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getProductById",
                    "defaultValue": "inject(GetProductByIdUseCase)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "product$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Product | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "route",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddToCart",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject } from '@angular/core';\r\nimport { ActivatedRoute, RouterLink } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap, catchError } from 'rxjs/operators';\r\nimport { Product } from '../../core/models/product.model';\r\nimport { GetProductByIdUseCase } from '../../application/get-product-by-id.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CartService } from '../../core/state/cart.service';\r\n\r\n@Component({\r\n  selector: 'app-product-detail',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterLink],\r\n  templateUrl: './product-detail.component.html',\r\n  styleUrls: ['./product-detail.component.scss']\r\n\r\n})\r\nexport class ProductDetailComponent implements OnInit {\r\n  product$!: Observable<Product | null>;\r\n\r\n  private route = inject(ActivatedRoute);\r\n  private getProductById = inject(GetProductByIdUseCase);\r\n  private cartService = inject(CartService);\r\n\r\n  ngOnInit(): void {\r\n    this.product$ = this.route.paramMap.pipe(\r\n      switchMap(params => {\r\n        const id = params.get('id');\r\n        if (id) {\r\n          return this.getProductById.execute(id).pipe(\r\n            catchError(error => {\r\n              console.error('Error fetching product:', error);\r\n              return of(null);\r\n            })\r\n          );\r\n        }\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  onAddToCart(product: Product): void {\r\n    if (product) {\r\n      this.cartService.addProduct(product);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  --page-bg: #0b0c10;\r\n  --container-bg: #1a1a1d;\r\n  --text-color: #c5c6c7;\r\n  --accent-color: #66fcf1;\r\n  --accent-hover-color: #45a29e;\r\n  --border-color: #4b5d67;\r\n  --error-color: #ff6b6b;\r\n}\r\n\r\n.product-detail-container {\r\n  background-color: var(--page-bg);\r\n  color: var(--text-color);\r\n  padding: 40px 20px;\r\n  min-height: calc(100vh - 70px);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n}\r\n\r\n.product-card {\r\n  display: grid;\r\n  grid-template-columns: 1fr; /* Una columna por defecto para móviles */\r\n  gap: 50px;\r\n  max-width: 1200px;\r\n  width: 100%;\r\n  background-color: var(--container-bg);\r\n  padding: 3rem;\r\n  border-radius: 10px;\r\n  border: 1px solid var(--border-color);\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);\r\n\r\n  /* Layout de dos columnas para pantallas más grandes */\r\n  @media (min-width: 768px) {\r\n    grid-template-columns: 1fr 1fr;\r\n  }\r\n}\r\n\r\n.product-image {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: var(--page-bg);\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n\r\n  img {\r\n    width: 100%;\r\n    height: auto;\r\n    max-height: 500px;\r\n    object-fit: cover;\r\n  }\r\n}\r\n\r\n.product-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n}\r\n\r\n.product-name {\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n  color: white;\r\n  margin: 0 0 1rem 0;\r\n  line-height: 1.2;\r\n}\r\n\r\n.product-price {\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  color: var(--accent-color);\r\n  margin: 0 0 1.5rem 0;\r\n}\r\n\r\n.product-description {\r\n  font-size: 1.1rem;\r\n  line-height: 1.7;\r\n  margin: 0 0 2rem 0;\r\n  flex-grow: 1;\r\n}\r\n\r\n.product-stock {\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  margin: 0 0 1.5rem 0;\r\n  padding: 8px 12px;\r\n  border-radius: 5px;\r\n  align-self: flex-start;\r\n  background-color: rgba(102, 252, 241, 0.1);\r\n  color: var(--accent-color);\r\n  border: 1px solid var(--accent-color);\r\n\r\n  &.out-of-stock {\r\n    background-color: rgba(255, 107, 107, 0.1);\r\n    color: var(--error-color);\r\n    border: 1px solid var(--error-color);\r\n  }\r\n}\r\n\r\n.add-to-cart-btn {\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background-color: var(--accent-color);\r\n  color: var(--container-bg);\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  text-transform: uppercase;\r\n  margin-bottom: 1.5rem;\r\n\r\n  &:hover:not(:disabled) {\r\n    background-color: var(--accent-hover-color);\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #4b5d67;\r\n    cursor: not-allowed;\r\n    opacity: 0.7;\r\n  }\r\n}\r\n\r\n.back-link {\r\n  color: var(--text-color);\r\n  text-decoration: none;\r\n  margin-top: 1rem;\r\n  font-size: 0.9rem;\r\n  align-self: flex-start;\r\n\r\n  &:hover {\r\n    color: var(--accent-color);\r\n  }\r\n}\r\n\r\n.loading-message {\r\n  font-size: 1.5rem;\r\n  color: var(--text-color);\r\n  text-align: center;\r\n  padding: 100px 20px;\r\n}\r\n",
                    "styleUrl": "./product-detail.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"product-detail-container\">\r\n  <ng-container *ngIf=\"product$ | async as product; else loadingOrError\">\r\n    <div class=\"product-card\">\r\n      <div class=\"product-image\">\r\n        <img [src]=\"product.imageUrl\" [alt]=\"product.name\">\r\n      </div>\r\n      <div class=\"product-info\">\r\n        <h1 class=\"product-name\">{{ product.name }}</h1>\r\n        <p class=\"product-price\">{{ product.price | currency:'ARS' }}</p>\r\n        <p class=\"product-description\">{{ product.description }}</p>\r\n        <p class=\"product-stock\" [class.out-of-stock]=\"product.stock === 0\">\r\n          Stock: {{ product.stock > 0 ? product.stock + ' unidades' : 'Agotado' }}\r\n        </p>\r\n        <button class=\"add-to-cart-btn\" (click)=\"onAddToCart(product)\" [disabled]=\"product.stock === 0\">\r\n          {{ product.stock > 0 ? 'Agregar al Carrito' : 'Sin Stock' }}\r\n        </button>\r\n        <a routerLink=\"/products\" class=\"back-link\">‹ Volver a la lista</a>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n\r\n<ng-template #loadingOrError>\r\n  <p class=\"loading-message\">Cargando detalles del producto...</p>\r\n</ng-template>\r\n"
        },
        {
            "name": "ProductFormComponent",
            "id": "component-ProductFormComponent-79c85db821f9655b185ed99be5f9112c3573cf45431c32a7f991ed9b6907e9606104f8f1b73630b1953ae67a10634a9e17a0bd53c8e43450baa68730ed2bc460",
            "file": "src/app/pages/admin/product-form/product-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-form",
            "styleUrls": [
                "./product-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isEditMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "pageTitle",
                    "defaultValue": "'Crear Producto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "productForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "productId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "loadProductData",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProductService } from '../../../core/services/product.service';\r\nimport { ListProductsUseCase } from '../../../application/list-products.service';\r\n\r\n@Component({\r\n  selector: 'app-product-form',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './product-form.component.html',\r\n  styleUrls: ['./product-form.component.scss']\r\n})\r\nexport class ProductFormComponent implements OnInit {\r\n  productForm!: FormGroup;\r\n  isEditMode = false;\r\n  productId: string | null = null;\r\n  isLoading = false;\r\n  pageTitle = 'Crear Producto';\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private productService: ProductService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private listProductsUseCase: ListProductsUseCase\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.productForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.minLength(3)]],\r\n      description: ['', [Validators.required, Validators.minLength(10)]],\r\n      price: [0, [Validators.required, Validators.min(0)]],\r\n      stock: [0, [Validators.required, Validators.min(0)]],\r\n      imageUrl: ['', [Validators.required]]\r\n    });\r\n\r\n    this.productId = this.route.snapshot.paramMap.get('id');\r\n    if (this.productId) {\r\n      this.isEditMode = true;\r\n      this.pageTitle = 'Editar Producto';\r\n      this.loadProductData(this.productId);\r\n    }\r\n  }\r\n\r\n  loadProductData(id: string): void {\r\n    this.isLoading = true;\r\n    this.productService.getProductById(id).subscribe({\r\n      next: (product) => {\r\n        this.productForm.patchValue(product);\r\n        this.isLoading = false;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error al cargar el producto:', err);\r\n        alert('No se pudo cargar el producto. Redirigiendo a la lista.');\r\n        this.router.navigate(['/products']);\r\n      }\r\n    });\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.router.navigate(['/products']);\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.productForm.invalid) {\r\n      this.productForm.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    this.isLoading = true;\r\n    const productData = {\r\n      ...this.productForm.value,\r\n      price: Number(this.productForm.value.price),\r\n      stock: Number(this.productForm.value.stock)\r\n    };\r\n\r\n    if (this.isEditMode && this.productId) {\r\n      this.productService.updateProduct(this.productId, productData).subscribe({\r\n        next: () => {\r\n          console.log('Producto actualizado con éxito');\r\n          this.listProductsUseCase.refresh();\r\n          this.router.navigate(['/products']);\r\n        },\r\n        error: (err) => {\r\n          console.error('Error al actualizar el producto:', err);\r\n          alert('Hubo un error al actualizar el producto.');\r\n          this.isLoading = false;\r\n        }\r\n      });\r\n    } else {\r\n      this.productService.createProduct(productData).subscribe({\r\n        next: () => {\r\n          console.log('Producto creado con éxito');\r\n          this.listProductsUseCase.refresh();\r\n          this.router.navigate(['/products']);\r\n        },\r\n        error: (err) => {\r\n          console.error('Error al crear el producto:', err);\r\n          alert('Hubo un error al crear el producto.');\r\n          this.isLoading = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  --form-bg: #1a1a1d;\r\n  --input-bg: #252a34;\r\n  --text-color: #c5c6c7;\r\n  --accent-color: #66fcf1;\r\n  --accent-hover-color: #45a29e;\r\n  --border-color: #4b5d67;\r\n  --error-color: #ff6b6b;\r\n  --cancel-bg: #3a3f44;\r\n  --cancel-hover-bg: #4b5d67;\r\n}\r\n\r\n.form-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  min-height: calc(100vh - 70px);\r\n  padding: 3rem 2rem;\r\n  background-color: #0b0c10;\r\n}\r\n\r\n.product-form {\r\n  background-color: var(--form-bg);\r\n  padding: 2.5rem;\r\n  border-radius: 10px;\r\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\r\n  width: 100%;\r\n  max-width: 700px;\r\n  border: 1px solid var(--border-color);\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n\r\n  h2 {\r\n    color: white;\r\n    text-align: center;\r\n    margin-bottom: 1rem;\r\n    font-size: 2rem;\r\n    font-weight: 600;\r\n  }\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  label {\r\n    margin-bottom: 0.5rem;\r\n    color: var(--text-color);\r\n    font-size: 0.9rem;\r\n    font-weight: 500;\r\n  }\r\n\r\n  input,\r\n  textarea {\r\n    background-color: var(--input-bg);\r\n    border: 1px solid var(--border-color);\r\n    border-radius: 5px;\r\n    padding: 0.7rem 1rem;\r\n    color: white;\r\n    font-size: 1rem;\r\n    transition: border-color 0.3s ease, box-shadow 0.3s ease;\r\n    width: 95%;\r\n\r\n    &::placeholder {\r\n      color: #6a737d;\r\n    }\r\n\r\n    &:focus {\r\n      outline: none;\r\n      border-color: var(--accent-color);\r\n      box-shadow: 0 0 0 3px rgba(102, 252, 241, 0.2);\r\n    }\r\n\r\n    &.ng-invalid.ng-touched {\r\n      border-color: var(--error-color);\r\n    }\r\n  }\r\n\r\n  textarea {\r\n    resize: vertical;\r\n    min-height: 100px;\r\n  }\r\n}\r\n\r\n.form-row {\r\n  display: flex;\r\n  gap: 1.5rem;\r\n\r\n  .form-group {\r\n    flex: 1;\r\n    width: 95%;\r\n  }\r\n  margin: auto;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n}\r\n#price,#stock{\r\n  width: 90%;\r\n}\r\n.error-message {\r\n  color: var(--error-color);\r\n  font-size: 0.85rem;\r\n  margin-top: 0.5rem;\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 1rem;\r\n  margin-top: 1.5rem;\r\n  border-top: 1px solid var(--border-color);\r\n  padding-top: 1.5rem;\r\n}\r\n\r\n.submit-btn,\r\n.cancel-btn {\r\n  padding: 0.8rem 1.5rem;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease, opacity 0.3s ease;\r\n}\r\n\r\n.submit-btn {\r\n  background-color: var(--accent-color);\r\n  color: var(--form-bg);\r\n\r\n  &:hover:not(:disabled) {\r\n    background-color: var(--accent-hover-color);\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #4b5d67;\r\n    cursor: not-allowed;\r\n    opacity: 0.7;\r\n  }\r\n}\r\n\r\n.cancel-btn {\r\n  background-color: var(--cancel-bg);\r\n  color: var(--text-color);\r\n\r\n  &:hover {\r\n    background-color: var(--cancel-hover-bg);\r\n  }\r\n}\r\n",
                    "styleUrl": "./product-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "listProductsUseCase",
                        "type": "ListProductsUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "listProductsUseCase",
                        "type": "ListProductsUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-container\">\r\n  <form class=\"product-form\" [formGroup]=\"productForm\" (ngSubmit)=\"onSubmit()\">\r\n    <h2>{{ pageTitle }}</h2>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"name\">Nombre del Producto</label>\r\n      <input id=\"name\" type=\"text\" formControlName=\"name\" placeholder=\"Ej: Teclado Mecánico HyperX\">\r\n      @if (productForm.get('name')?.invalid && (productForm.get('name')?.dirty || productForm.get('name')?.touched)) {\r\n        <div class=\"error-message\">\r\n          @if (productForm.get('name')?.hasError) { <p>El nombre es requerido.</p> }\r\n          @if (productForm.get('name')?.hasError) { <p>Debe tener al menos 3 caracteres.</p> }\r\n        </div>\r\n      }\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"description\">Descripción</label>\r\n      <textarea id=\"description\" formControlName=\"description\" rows=\"4\" placeholder=\"Describe las características principales del producto...\"></textarea>\r\n      @if (productForm.get('description')?.invalid && (productForm.get('description')?.dirty || productForm.get('description')?.touched)) {\r\n        <div class=\"error-message\">\r\n          @if (productForm.get('description')?.hasError) { <p>La descripción es requerida.</p> }\r\n          @if (productForm.get('description')?.hasError) { <p>Debe tener al menos 10 caracteres.</p> }\r\n        </div>\r\n      }\r\n    </div>\r\n\r\n    <div class=\"form-row\">\r\n      <div class=\"form-group\">\r\n        <label for=\"price\">Precio (ARS)</label>\r\n        <input id=\"price\" type=\"number\" formControlName=\"price\" placeholder=\"0.00\">\r\n        @if (productForm.get('price')?.invalid && (productForm.get('price')?.dirty || productForm.get('price')?.touched)) {\r\n          <div class=\"error-message\">\r\n            @if (productForm.get('price')?.hasError) { <p>El precio es requerido.</p> }\r\n            @if (productForm.get('price')?.hasError) { <p>El precio no puede ser negativo.</p> }\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"stock\">Stock</label>\r\n        <input id=\"stock\" type=\"number\" formControlName=\"stock\" placeholder=\"0\">\r\n        @if (productForm.get('stock')?.invalid && (productForm.get('stock')?.dirty || productForm.get('stock')?.touched)) {\r\n          <div class=\"error-message\">\r\n            @if (productForm.get('stock')?.hasError) { <p>El stock es requerido.</p> }\r\n            @if (productForm.get('stock')?.hasError) { <p>El stock no puede ser negativo.</p> }\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"imageUrl\">URL de la Imagen</label>\r\n      <input id=\"imageUrl\" type=\"url\" formControlName=\"imageUrl\" placeholder=\"https://ejemplo.com/imagen.jpg\">\r\n      @if (productForm.get('imageUrl')?.invalid && (productForm.get('imageUrl')?.dirty || productForm.get('imageUrl')?.touched)) {\r\n        <div class=\"error-message\">\r\n          @if (productForm.get('imageUrl')?.hasError) { <p>La URL de la imagen es requerida.</p> }\r\n          @if (productForm.get('imageUrl')?.hasError) { <p>Debe ser una URL válida (http://... o https://...).</p> }\r\n        </div>\r\n      }\r\n    </div>\r\n\r\n    <div class=\"form-actions\">\r\n      <button type=\"button\" class=\"cancel-btn\" (click)=\"onCancel()\">Cancelar</button>\r\n      <button type=\"submit\" class=\"submit-btn\" [disabled]=\"productForm.invalid || isLoading\">\r\n        {{ isLoading ? 'Guardando...' : (isEditMode ? 'Actualizar Producto' : 'Crear Producto') }}\r\n      </button>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "ProductListComponent",
            "id": "component-ProductListComponent-f243b96f9c9e2ab1d32b2ef77f1126bf15e6aa22d63ef448b6853efd419d69e56816a03715ab788dbd10f0985046ef910cb44212cc287bfdf595260a82253d69",
            "file": "src/app/pages/product-list/product-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-list",
            "styleUrls": [
                "./product-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAdmin$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "products$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Product[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ProductCardComponent",
                    "type": "component"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';import { Observable } from 'rxjs';\r\nimport { Product } from '../../core/models/product.model';\r\nimport { ListProductsUseCase } from '../../application/list-products.service';\r\nimport { AuthService } from '../../core/auth/auth.service';\r\nimport { ProductCardComponent } from '../../shared/components/product-card/product-card.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterLink } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-product-list',\r\n  standalone: true,\r\n  imports: [CommonModule, ProductCardComponent, RouterLink],\r\n  templateUrl: './product-list.component.html',\r\n  styleUrls: ['./product-list.component.scss'],})\r\nexport class ProductListComponent {\r\n  products$: Observable<Product[]>;\r\n  isAdmin$: Observable<boolean>;\r\n  constructor(\r\n    private listProductsUseCase: ListProductsUseCase,\r\n    private authService: AuthService\r\n  ) {\r\n    this.products$ = this.listProductsUseCase.products$;\r\n    this.isAdmin$ = this.authService.isAdmin$;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  --background-dark: #0b0c10;\r\n  --container-dark: #1a1a1d;\r\n  --text-color: #c5c6c7;\r\n  --accent-color: #66fcf1;\r\n  --accent-hover-color: #45a29e;\r\n  --border-color: #4b5d67;\r\n}\r\n\r\n.product-list-container {\r\n  background-color: #0b0c10;\r\n  min-height: calc(100vh - 70px);\r\n  padding: 24px;\r\n}\r\n\r\n.list-header {\r\n  max-width: 1400px;\r\n  margin: 0 auto 24px auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 1rem;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    color: white;\r\n    font-size: 2rem;\r\n  }\r\n}\r\n\r\n.create-product-btn {\r\n  background-color: var(--accent-color);\r\n  color: var(--container-dark);\r\n  padding: 10px 20px;\r\n  border-radius: 5px;\r\n  text-decoration: none;\r\n  font-weight: bold;\r\n  transition: background-color 0.2s ease, transform 0.2s ease;\r\n\r\n  &:hover {\r\n    background-color: var(--accent-hover-color);\r\n    transform: translateY(-2px);\r\n  }\r\n}\r\n\r\n.product-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 24px;\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n}\r\n",
                    "styleUrl": "./product-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "listProductsUseCase",
                        "type": "ListProductsUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "listProductsUseCase",
                        "type": "ListProductsUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"product-list-container\">\r\n  <div class=\"list-header\">\r\n    <h1>Catálogo de Productos</h1>\r\n    @if (isAdmin$ | async) {\r\n      <a routerLink=\"/admin/products/new\" class=\"create-product-btn\">Crear Nuevo Producto</a>\r\n    }\r\n  </div>\r\n\r\n  <div class=\"product-grid\">\r\n      @for (product of products$ | async; track product.id) {\r\n        <app-product-card [product]=\"product\"></app-product-card>\r\n      }\r\n      </div>\r\n</div>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-688f8a821c701928ad4a12cb0d58425f7cafd3f8206cfcf0debfa678b0988179d873671dce346f88f4dbb33f6ef0fc14047b6ba41510a5b7b76a0aebd99a1b21",
            "file": "src/app/pages/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router, RouterLink } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from '../../core/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, RouterLink],\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm!: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = this.fb.group({\r\n      name: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.authService.register(this.registerForm.value).subscribe({\r\n      next: () => this.router.navigate(['/login']),\r\n      error: (err) => console.error('Error en el registro:', err)\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  --form-bg: #1a1a1d;\r\n  --input-bg: #252a34;\r\n  --text-color: #c5c6c7;\r\n  --accent-color: #66fcf1;\r\n  --accent-hover-color: #45a29e;\r\n  --border-color: #4b5d67;\r\n  --error-color: #ff6b6b;\r\n}\r\n\r\n.register-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: calc(100vh - 70px);\r\n  padding: 2rem;\r\n  background-color: #0b0c10;\r\n}\r\n\r\n.register-form {\r\n  background-color: var(--form-bg);\r\n  padding: 2.5rem;\r\n  border-radius: 10px;\r\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);\r\n  width: 100%;\r\n  max-width: 400px;\r\n  border: 1px solid var(--border-color);\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n\r\n  h2 {\r\n    color: white;\r\n    text-align: center;\r\n    margin-bottom: 1rem;\r\n    font-size: 2rem;\r\n    font-weight: 600;\r\n  }\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  label {\r\n    margin-bottom: 0.5rem;\r\n    color: var(--text-color);\r\n    font-size: 0.9rem;\r\n    font-weight: 500;\r\n  }\r\n\r\n  input {\r\n    background-color: var(--input-bg);\r\n    border: 1px solid var(--border-color);\r\n    border-radius: 5px;\r\n    padding: 0.8rem 1rem;\r\n    color: white;\r\n    font-size: 1rem;\r\n    transition: border-color 0.3s ease, box-shadow 0.3s ease;\r\n\r\n    &::placeholder {\r\n      color: #6a737d;\r\n    }\r\n\r\n    &:focus {\r\n      outline: none;\r\n      border-color: var(--accent-color);\r\n      box-shadow: 0 0 0 3px rgba(102, 252, 241, 0.2);\r\n    }\r\n  }\r\n}\r\n\r\nbutton[type=\"submit\"] {\r\n  background-color: var(--accent-color);\r\n  color: var(--form-bg);\r\n  border: none;\r\n  padding: 0.9rem;\r\n  border-radius: 5px;\r\n  font-size: 1.1rem;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n  margin-top: 1rem;\r\n\r\n  &:hover:not(:disabled) {\r\n    background-color: var(--accent-hover-color);\r\n  }\r\n\r\n  &:disabled {\r\n    background-color: #4b5d67;\r\n    cursor: not-allowed;\r\n    opacity: 0.7;\r\n  }\r\n}\r\n\r\n.error-message {\r\n  color: var(--error-color);\r\n  font-size: 0.85rem;\r\n  margin-top: 0.5rem;\r\n\r\n  p {\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n.login-link {\r\n  text-align: center;\r\n  font-size: 0.9rem;\r\n  color: var(--text-color);\r\n  margin-top: 1rem;\r\n\r\n  a {\r\n    color: var(--accent-color);\r\n    text-decoration: none;\r\n    font-weight: bold;\r\n\r\n    &:hover {\r\n      text-decoration: underline;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"register-container\">\r\n  <form class=\"register-form\" [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n    <h2>Crear una cuenta</h2>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"name\">Nombre</label>\r\n      <input id=\"name\" type=\"text\" formControlName=\"name\" placeholder=\"Tu nombre completo\">\r\n      @if (registerForm.get('name')?.invalid && (registerForm.get('name')?.dirty || registerForm.get('name')?.touched)) {\r\n        <div class=\"error-message\">\r\n          @if (registerForm.get('name')?.hasError) {\r\n            <p>El nombre es requerido.</p>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"email\">Email</label>\r\n      <input id=\"email\" type=\"email\" formControlName=\"email\" placeholder=\"tu@email.com\">\r\n      @if (registerForm.get('email')?.invalid && (registerForm.get('email')?.dirty || registerForm.get('email')?.touched)) {\r\n        <div class=\"error-message\">\r\n          @if (registerForm.get('email')?.hasError) {\r\n            <p>El email es requerido.</p>\r\n          }\r\n          @if (registerForm.get('email')?.hasError) {\r\n            <p>Por favor, introduce un email válido.</p>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label for=\"password\">Contraseña</label>\r\n      <input id=\"password\" type=\"password\" formControlName=\"password\" placeholder=\"••••••••\">\r\n      @if (registerForm.get('password')?.invalid && (registerForm.get('password')?.dirty || registerForm.get('password')?.touched)) {\r\n        <div class=\"error-message\">\r\n          @if (registerForm.get('password')?.hasError) {\r\n            <p>La contraseña es requerida.</p>\r\n          }\r\n          @if (registerForm.get('password')?.hasError) {\r\n            <p>La contraseña debe tener al menos 6 caracteres.</p>\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n\r\n    <button type=\"submit\" [disabled]=\"registerForm.invalid\">Registrarse</button>\r\n\r\n    <div class=\"login-link\">\r\n      <span>¿Ya tienes una cuenta? <a routerLink=\"/login\">Inicia sesión</a></span>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "StatCardComponent",
            "id": "component-StatCardComponent-ce96e72207aa6d1af63bdf52621c2f56021480dcd304053b048863bea3a23fc741e2c613d4662dffe547bfc37f6d84a4337549115e2b0d80daac0a30e7213c84",
            "file": "src/app/shared/components/stat-card/stat-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stat-card",
            "styleUrls": [
                "./stat-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stat-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-stat-card',\n  standalone: true,\n  imports: [],\n  templateUrl: './stat-card.component.html',\n  styleUrls: ['./stat-card.component.scss']\n})\nexport class StatCardComponent {\n  @Input() icon!: string;\n  @Input() label!: string;\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  --container-bg: #1a1a1d;\n  --text-color: #c5c6c7;\n  --border-color: #4b5d67;\n}\n\n.stat-card-container {\n  background-color: var(--container-bg);\n  border: 1px solid var(--border-color);\n  border-radius: 10px;\n  padding: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n\n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 20px rgba(102, 252, 241, 0.1);\n  }\n}\n\n.stat-icon {\n  font-size: 3rem;\n  line-height: 1;\n}\n\n.stat-info {\n  text-align: center;\n\n  // Estilos para el contenido proyectado\n  ::ng-deep .stat-value {\n    font-size: 2.2rem;\n    font-weight: 700;\n    color: white;\n    margin: 0;\n    word-break: break-all;\n  }\n\n  .stat-label {\n    font-size: 1rem;\n    color: var(--text-color);\n    margin: 5px 0 0;\n  }\n}",
                    "styleUrl": "./stat-card.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"stat-card-container\">\n  <div class=\"stat-icon\">{{ icon }}</div>\n  <div class=\"stat-info\">\n    <ng-content></ng-content> <!-- Proyecta el valor y el label -->\n    <p class=\"stat-label\">{{ label }}</p>\n  </div>\n</div>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADMIN_ROUTES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/pages/admin/admin.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Routes",
                "defaultValue": "[\r\n\r\n  {\r\n    path: 'products/edit/:id',\r\n    loadComponent: () => \"import('./product-form/product-form.component').then(m => m.ProductFormComponent)\"\r\n  },\r\n  {\r\n    path: 'products/new',\r\n    loadComponent: () => \"import('./product-form/product-form.component').then(m => m.ProductFormComponent)\"\r\n  },\r\n  {\r\n    path: '',\r\n    loadComponent: () => \"import('./dashboard/dashboard.component').then(m => m.DashboardComponent)\"\r\n  },\r\n]"
            },
            {
                "name": "adminGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/admin.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "() => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  return authService.isAdmin$.pipe(\r\n    take(1),\r\n    map(isAdmin => {\r\n      if (isAdmin) {\r\n        return true;\r\n      } else {\r\n        router.navigate(['/']);\r\n        return false;\r\n      }\r\n    })\r\n  );\r\n}"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes),\r\n    provideHttpClient(withInterceptors([authInterceptor])),\r\n  ]\r\n}"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const authService = inject(AuthService);\r\n  const token = authService.getToken();\r\n\r\n  if (!token) {\r\n    return next(req);\r\n  }\r\n\r\n  const authReq = req.clone({\r\n    setHeaders: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  });\r\n\r\n  return next(authReq);\r\n}",
                "rawdescription": "Interceptor funcional que se encarga de añadir el token de autenticación\r\na las cabeceras de las peticiones HTTP salientes.",
                "description": "<p>Interceptor funcional que se encarga de añadir el token de autenticación\na las cabeceras de las peticiones HTTP salientes.</p>\n"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Routes",
                "defaultValue": "[\r\n  { path: 'products', component: ProductListComponent },\r\n  { path: 'about', component: AboutComponent },\r\n  { path: 'contact', component: ContactComponent },\r\n  {\r\n    path: 'cart',\r\n    loadComponent: () => \"import('./pages/cart/cart.component').then(m => m.CartComponent)\"\r\n  },\r\n  {\r\n    path: 'login',\r\n    loadComponent: () => \"import('./pages/login/login.component').then(m => m.LoginComponent)\"\r\n  },\r\n  {\r\n    path: 'register',\r\n    loadComponent: () => \"import('./pages/register/register.component').then(m => m.RegisterComponent)\"\r\n  },\r\n  {\r\n    path: 'admin',\r\n    canActivate: [adminGuard],\r\n    loadChildren: () => \"import('./pages/admin/admin.routes').then(m => m.ADMIN_ROUTES)\"\r\n  },\r\n  {\r\n    path: 'products/:id',\r\n    loadComponent: () => \"import('./pages/product-detail/product-detail.component').then(m => m.ProductDetailComponent)\"\r\n  },\r\n  { path: '', redirectTo: '/products', pathMatch: 'full' }\r\n]"
            },
            {
                "name": "TOKEN_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'auth-token'"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/pages/admin/admin.routes.ts": [
                {
                    "name": "ADMIN_ROUTES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/pages/admin/admin.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Routes",
                    "defaultValue": "[\r\n\r\n  {\r\n    path: 'products/edit/:id',\r\n    loadComponent: () => \"import('./product-form/product-form.component').then(m => m.ProductFormComponent)\"\r\n  },\r\n  {\r\n    path: 'products/new',\r\n    loadComponent: () => \"import('./product-form/product-form.component').then(m => m.ProductFormComponent)\"\r\n  },\r\n  {\r\n    path: '',\r\n    loadComponent: () => \"import('./dashboard/dashboard.component').then(m => m.DashboardComponent)\"\r\n  },\r\n]"
                }
            ],
            "src/app/core/guards/admin.guard.ts": [
                {
                    "name": "adminGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/admin.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "() => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  return authService.isAdmin$.pipe(\r\n    take(1),\r\n    map(isAdmin => {\r\n      if (isAdmin) {\r\n        return true;\r\n      } else {\r\n        router.navigate(['/']);\r\n        return false;\r\n      }\r\n    })\r\n  );\r\n}"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideRouter(routes),\r\n    provideHttpClient(withInterceptors([authInterceptor])),\r\n  ]\r\n}"
                }
            ],
            "src/app/core/interceptors/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const authService = inject(AuthService);\r\n  const token = authService.getToken();\r\n\r\n  if (!token) {\r\n    return next(req);\r\n  }\r\n\r\n  const authReq = req.clone({\r\n    setHeaders: {\r\n      Authorization: `Bearer ${token}`\r\n    }\r\n  });\r\n\r\n  return next(authReq);\r\n}",
                    "rawdescription": "Interceptor funcional que se encarga de añadir el token de autenticación\r\na las cabeceras de las peticiones HTTP salientes.",
                    "description": "<p>Interceptor funcional que se encarga de añadir el token de autenticación\na las cabeceras de las peticiones HTTP salientes.</p>\n"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Routes",
                    "defaultValue": "[\r\n  { path: 'products', component: ProductListComponent },\r\n  { path: 'about', component: AboutComponent },\r\n  { path: 'contact', component: ContactComponent },\r\n  {\r\n    path: 'cart',\r\n    loadComponent: () => \"import('./pages/cart/cart.component').then(m => m.CartComponent)\"\r\n  },\r\n  {\r\n    path: 'login',\r\n    loadComponent: () => \"import('./pages/login/login.component').then(m => m.LoginComponent)\"\r\n  },\r\n  {\r\n    path: 'register',\r\n    loadComponent: () => \"import('./pages/register/register.component').then(m => m.RegisterComponent)\"\r\n  },\r\n  {\r\n    path: 'admin',\r\n    canActivate: [adminGuard],\r\n    loadChildren: () => \"import('./pages/admin/admin.routes').then(m => m.ADMIN_ROUTES)\"\r\n  },\r\n  {\r\n    path: 'products/:id',\r\n    loadComponent: () => \"import('./pages/product-detail/product-detail.component').then(m => m.ProductDetailComponent)\"\r\n  },\r\n  { path: '', redirectTo: '/products', pathMatch: 'full' }\r\n]"
                }
            ],
            "src/app/core/auth/auth.service.ts": [
                {
                    "name": "TOKEN_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'auth-token'"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": [
            {
                "name": "products/edit/:id",
                "kind": "route-path",
                "filename": "src/app/pages/admin/admin.routes.ts"
            },
            {
                "name": "products/new",
                "kind": "route-path",
                "filename": "src/app/pages/admin/admin.routes.ts"
            },
            {
                "name": "ProductListComponent",
                "kind": "component",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "AboutComponent",
                "kind": "component",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "ContactComponent",
                "kind": "component",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "products",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "about",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "contact",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "cart",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "login",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "register",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "admin",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "products/:id",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "/products",
                "kind": "route-redirect",
                "filename": "src/app/app.routes.ts"
            }
        ]
    },
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "component",
                "linktype": "component",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/application/get-product-by-id.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GetProductByIdUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/application/list-products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListProductsUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/application/list-products.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ListProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 53,
                "coverageCount": "7/13",
                "status": "good"
            },
            {
                "filePath": "src/app/core/auth/auth.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TOKEN_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/admin.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adminGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/models/cart-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductStats",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/order.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderService",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/services/product.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/state/cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CartService",
                "coveragePercent": 7,
                "coverageCount": "1/14",
                "status": "low"
            },
            {
                "filePath": "src/app/infrastructure/product-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductRepository",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/about/about.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/admin/admin.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADMIN_ROUTES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/admin/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/admin/product-form/product-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/cart/cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/checkout/checkout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/contact/contact.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContactComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/product-detail/product-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/product-list/product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/cart-item/cart-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/product-card/product-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/stat-card/stat-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            }
        ]
    }
}